/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Alex' at '3/17/16 1:49 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    flatDir {
        dirs('lib', '.', 'validatoare')
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.json:json:20160212'

    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile name: 'Download'

    compile fileTree(dir: 'lib')

    compile 'org.eclipse.jetty:jetty-server:9.3.8.v20160314'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.8.v20160314'

    compile 'org.glassfish.jersey.core:jersey-server:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.22.2'

    compile 'org.json:json:20160212'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'rest'
        }
        resources {
            srcDir 'dist/lib'
        }
    }
}

task updateValidation {
    doFirst {

        def versionDictionary = [:]

        def configFile = new File('configversiuniCurente.txt')

        configFile.eachLine { line, number ->

            if(number == 1) return

            def (declaratie, versiuneJ, versiuneP) = line.tokenize(';')

            versionDictionary[declaratie]= [
                versiuneJ: versiuneJ,
                versiuneP: versiuneP
            ]
        }

        def versiuni = new XmlSlurper().parse('http://static.anaf.ro/static/10/Anaf/update1/versiuni.xml')

        versiuni.declaratii.childNodes().each({
            def name = it.name()
            def library = it.children().inject([:], { acc, value ->

                acc[value.name()] = value.text()
                acc

            })
            ant.get(src: library.JURL, dest: 'lib')
            ant.get(src: library.PURL, dest: 'lib')

//            println library.JURL
//            println library.PURL

            versionDictionary[name] = library
        })

        configFile.write  "Declaratie;VersiuneJ;VersiuneP\n"

        versionDictionary.each { key, value ->
            configFile << "${key};${value.versiuneJ};${value.versiuneJ}\n"
        }

    }
}