buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.json:json:20160212'

    }
}

plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile fileTree(dir: "${project.rootDir}/lib", includes: ['*.jar'])

    compile 'org.eclipse.jetty:jetty-server:9.3.8.v20160314'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.8.v20160314'

    compile 'org.glassfish.jersey.core:jersey-server:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.22.2'
    compile 'org.reflections:reflections:0.9.10'

    compile 'org.json:json:20160212'

    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir 'DUKIntegrator/src'
        }
    }
}

mainClassName = "ro.incremental.anaf.declaratii.JobQueueServer"

distTar {
    compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from('config') {
                into "config"
            }

            from('examples') {
                into 'examples'
            }
            from('ajutor') {
                into 'ajutor'
            }
        }
    }
}

task stage {
    dependsOn installDist
}

task updateFromANAF {
    doFirst {

        //Download an unpack sources
        ant.get(src: 'http://static.anaf.ro/static/10/Anaf/Declaratii_R/AplicatiiDec/src_20140505.zip', dest: 'DUKIntegrator/src.zip')
        ant.unzip(src: 'DUKIntegrator/src.zip', dest: 'DUKIntegrator')

        delete('DUKIntegrator/src.zip')

        //Download libraries
        def versionDictionary = [:]

        def configFile = new File('config/versiuniCurente.txt')

        def versiuni = new XmlSlurper().parse('http://static.anaf.ro/static/10/Anaf/update1/versiuni.xml')

        def allUrls = []

        //Itext and dependencies
        versiuni.integrator.iJars.childNodes().each({
            allUrls.add(it.text())
        })

        //Validator and dependencies
        versiuni.integrator.sJars.childNodes().each({
            allUrls.add(it.text())
        })

        //DUK and dependencies
        versiuni.integrator.zJars.childNodes().each({
            allUrls.add(it.text())
        })

        //Download and dependencies
        versiuni.integrator.dJars.childNodes().each({
            allUrls.add(it.text())
        })

        //Get declaratii URL's
        versiuni.declaratii.childNodes().each({
            def name = it.name()

            //Flatten library XML
            def library = it.children().inject([:], { acc, value ->

                acc[value.name()] = value.text()
                acc

            })

            allUrls.add(library.JURL)
            allUrls.add(library.PURL)

            versionDictionary[name] = library
        })

        //Download all url's
        allUrls.each({
            println it
            ant.get(src: it, dest: 'lib')
        })

//        configFile.write versiuni.integrator.versiune "Declaratie;VersiuneJ;VersiuneP\n"
        configFile.write "Declaratie;VersiuneJ;VersiuneP\n"

        def packages = new File("src/main/resources/packages.txt")

        versionDictionary.each { key, value ->
            configFile << "${key};${value.versiuneJ};${value.versiuneJ}\n"
            packages << "${key.toString().toLowerCase()}\n"
        }

    }
}
